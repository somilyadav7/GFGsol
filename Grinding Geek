class Solution{
    public:
    int help(int ind, int total, int n, vector<int> &cost, vector<vector<int>> &dp)
    {
        if(ind==n)
            return 0;
        if(dp[ind][total]!=-1)
            return dp[ind][total];
        if(total<cost[ind])
            return dp[ind][total] = help(ind+1, total, n, cost, dp);
        else{
            int leftAmount = total - cost[ind];
            int refund = 0.9*cost[ind];
            leftAmount += refund;
            
            int pick = 1 + help(ind+1, leftAmount, n, cost, dp);
            int notPick = 0 + help(ind+1, total, n, cost, dp);
            
            return dp[ind][total] = max(pick, notPick);
        }
        return -1;
    }
    
    int max_courses(int n, int total, vector<int> &cost)
    {
        //Code Here
        vector<vector<int>> dp(n+1, vector<int>(total+1, -1));
        int count = help(0, total, n, cost, dp);
        return count;
     }
};
