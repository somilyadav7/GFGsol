class Solution {
  public:
    int MinimumEffort(int rows, int columns, vector<vector<int>> &heights) {
        // code here
        vector<vector<int>> vis(rows,vector<int>(columns,INT_MAX));
        queue<pair<int,pair<int,int>>> q;
        q.push({0,{0,0}});
        int dx[] = {-1,0,1,0};
        int dy[] = {0,1,0,-1};
        while(!q.empty())
        {
            auto temp = q.front();
            q.pop();
            int i=temp.second.first;
            int j=temp.second.second;
            int dis=temp.first;
            for(int k=0; k<4; k++)
            {
                int x = i + dx[k];
                int y = j + dy[k];
                if(x>=0 && y>=0 && x<rows && y<columns)
                {
                    int newd = max(dis,abs(heights[i][j]-heights[x][y]));
                    if(newd<vis[x][y])
                    {
                        vis[x][y]=newd;
                        q.push({newd,{x,y}});
                    }
                }
            }
        }
        return (vis[rows-1][columns-1]!=INT_MAX) ? vis[rows-1][columns-1] : 0;
    }
};
