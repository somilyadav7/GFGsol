You are given an integer k and matrix mat. Rotate the elements of the given matrix to the left k times and return the resulting matrix.

Examples:

Input: k=1, mat=[[1,2,3],[4,5,6],[7,8,9]]
Output:
2 3 1
5 6 4
8 9 7
Explanation: Rotate the matrix by one
1 2 3       2 3 1
4 5 6  =>  5 6 4
7 8 9       8 9 7
Input: k=2, mat=[[1,2,3],[4,5,6],[7,8,9]]
Output:
3 1 2
6 4 5
9 7 8
Explanation: After rotating the matrix looks like
1 2 3       2 3 1       3 1 2
4 5 6  =>  5 6 4  =>   6 4 5
7 8 9       8 9 7       9 7 8
Expected Time Complexity: O(n*m)
Expected Auxillary Space: O(n*m)

class Solution {
  public:
    vector<vector<int>> rotateMatrix(int k, vector<vector<int>> mat) {
        // code here
        int n=mat.size(), m=mat[0].size();
        int rotate=k%m;
        vector<vector<int>>ans;
        for(int i=0;i<n;i++)
        {
            reverse(mat[i].begin(),mat[i].begin()+rotate);
            reverse(mat[i].begin()+rotate,mat[i].end());
            reverse(mat[i].begin(),mat[i].end());
            ans.push_back(mat[i]);
        }
        
        return ans;
    }
};

    vector<vector<int>> rotateMatrix(int k, vector<vector<int>> mat) {
        // code here
        int n=mat.size(), m=mat[0].size();
        int rotate=k%m;
        vector<vector<int>>ans;
        for(int i=0;i<n;i++)
        {
            reverse(mat[i].begin(),mat[i].begin()+rotate);
            reverse(mat[i].begin()+rotate,mat[i].end());
            reverse(mat[i].begin(),mat[i].end());
            ans.push_back(mat[i]);
        }
        
        return ans;
    }
