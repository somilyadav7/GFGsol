Given two arrays of integers a[] and b[] of size n and m, the task is to check if a pair of values (one value from each array) exists such that swapping the elements of the pair will make the sum of two arrays equal.

Note: Return 1 if there exists any such pair otherwise return -1.

Example 1:

Input: n = 6, m = 4, a[] = {4, 1, 2, 1, 1, 2}, b[] = (3, 6, 3, 3)
Output: 1
Explanation: Sum of elements in a[] = 11, Sum of elements in b[] = 15, To get same sum from both arrays, we can swap following values: 1 from a[] and 3 from b[]
Example 2:

Input: n = 4, m = 4, a[] = {5, 7, 4, 6}, b[] = {1, 2, 3, 8}
Output: 1
Explanation: We can swap 6 from array a[] and 2 from array b[]
Expected Time Complexity: O(mlogm+nlogn).
Expected Auxiliary Space: O(1).

Constraints:
1 ≤ n, m ≤ 106
0 <= a[i], b[i] <= 105


class Solution {

  public:
    int findSwapValues(int a[], int n, int b[], int m) {
        // Your code goes here
        long long sum1 = accumulate(a, a + n, 0LL);
        long long sum2 = accumulate(b, b + m, 0LL);

        if((sum1-sum2)%2!=0) 
            return -1;
        int target=(sum1-sum2)/2;
        int i=0, j=0;
        sort(a, a+n);
        sort(b, b+m);
        while(i<n && j<m)
        {
            int diff=a[i]-b[j];
            if(diff==target) 
                return 1;
            else if(diff<target) 
                i++;
            else 
                j++;
        }
        return -1;
    }
};


// Step 1: Calculate the sums of both arrays
        long long sum1 = accumulate(a, a + n, 0LL);
        long long sum2 = accumulate(b, b + m, 0LL);

        // Step 2: Check if the difference is even
        long long diff = sum2 - sum1;
        if (diff % 2 != 0) {
            return -1;
        }

        // Step 3: Use a set to store elements of the second array
        unordered_set<long long> setB(b, b + m);
        long long target = diff / 2;

        // Step 4: Iterate through the first array to find a pair
        for (int i = 0; i < n; ++i) {
            long long requiredElement = a[i] + target;
            if (setB.find(requiredElement) != setB.end()) {
                return 1;
            }
        }

        return -1;
