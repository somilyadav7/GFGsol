DRY RUN:

sum=14

Given an integer array(0-based indexing) a of size n. Your task is to return the maximum value of the sum of i*a[i] for all 0<= i <=n-1, where a[i] is the element at index i in the array. The only operation allowed is to rotate(clockwise or counterclockwise) the array any number of times.

Example 1:

Input: n = 4, a[] = {8, 3, 1, 2}
Output: 29
Explanation: All the configurations possible by rotating the elements are:
3 1 2 8 here sum is 3*0+1*1+2*2+8*3 = 29
1 2 8 3 here sum is 1*0+2*1+8*2+3*3 = 27
2 8 3 1 here sum is 2*0+8*1+3*2+1*3 = 17
8 3 1 2 here sum is 8*0+3*1+1*2+2*3 = 11, so the maximum sum will be 29.
Example 2:

Input: n = 3, a[] = {1, 2, 3}
Output: 8
Explanation: All the configurations possible by rotating the elements are:
1 2 3 here sum is 1*0+2*1+3*2 = 8
3 1 2 here sum is 3*0+1*1+2*2 = 5
2 3 1 here sum is 2*0+3*1+1*2 = 5, so the maximum sum will be 8.
Expected Time Complexity: O(n).
Expected Auxiliary Space: O(1).

let initial_sum be the original array sum, let that be

a = 0*8 + 1*3 + 2*1 + 3*2

and b be the next rotation sum of array[3,1,2,8]

b = 3*8 + 0*3 + 1*1 + 2*2

relation between them 

b-a = (3-0)*8 + (0-1)*3 + (1-2)*1 + (2-3)*2

b-a = 3*8 + (3+1+2)*-1

b-a = 3*8 + (3+1+2+8)*-1 +8

b-a = 4*8 - sum

b = a + len*8 - sum

therefore, sum_change = initial_sum + len*a[i-1] - sum

and take the maximum of sum_change and thats our answer

change initial_sum everytion loop iterates to sum_change so that initial sum would always be the sum of the previous rotations.

class Solution {
  public:
    long long max_sum(int a[], int n) {
        // Your code here
        long long sum=0;
        for(long long i=0;i<n;i++){
            sum+=a[i];
        }
        
        long long initial_sum=0, max_sum=0;
        for(long long i=0;i<n;i++){
            initial_sum+=i*a[i];
        }
        max_sum=initial_sum;
        for(int i=1; i<n; i++)
        {
            long long sum_change = initial_sum - sum + 1LL*n*a[i-1];
            max_sum=max(max_sum,sum_change);
            initial_sum=sum_change;
        }
      
        return max_sum;  
    }
};
