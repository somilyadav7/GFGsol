Given two strings, s1 and s2, count the number of subsequences of string s1 equal to string s2.

Return the total count modulo 1e9+7.

Example 1:

Input: s1 = geeksforgeeks, s2 = gks
Output: 4
Explaination: We can pick characters from s1 as a subsequence from indices {0,3,4}, {0,3,12}, {0,11,12} and {8,11,12}.So total 4 subsequences of s1 that are equal to s2.
Example 2:

Input: s1 = problemoftheday, s2 = geek
Output: 0
Explaination: No subsequence of string s1 is equal to string s2.

class Solution {
  public:
    int mod = 1e9+7;
    int help(string &s1, string &s2, int i, int j, vector<vector<int>> &dp)
    {
        if(j==s2.length())
            return 1;
        else if(i==s1.length())
            return 0;
        if(dp[i][j]!=-1)
            return dp[i][j];
        int x=0, y=0;
        if(s1[i]==s2[j])
            x = help(s1,s2,i+1,j+1,dp);
        y = help(s1,s2,i+1,j,dp);
        return dp[i][j] = (x+y)%mod;
    }
  
    int countWays(string s1, string s2) {
        // code here
        vector<vector<int>> dp(s1.length(),vector<int>(s2.length(),-1));
        return help(s1,s2,0,0,dp);
    }
};
