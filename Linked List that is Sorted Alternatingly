class Solution
{
    public:
    // your task is to complete this function
    Node* reverse(Node *head)
    {
        Node *prevPtr=NULL;
        Node *currPtr=head;
        Node *nextPtr;
        while(currPtr!=nullptr)
        {
            nextPtr=currPtr->next;
            currPtr->next=prevPtr;
            prevPtr=currPtr;
            currPtr=nextPtr;
        }
        return prevPtr;
    }
    
    Node* merge(Node *l1, Node *l2)
    {
        Node *dummy=new Node(-1);
        Node *tail=dummy;
        while(l1 && l2)
        {
            if(l1->data<l2->data)
            {
                tail->next=l1;
                l1=l1->next;
            }
            else{
                tail->next=l2;
                l2=l2->next;
            }
            tail=tail->next;
        }
        tail->next=l1?l1:l2;
        return dummy->next;
    }
    
    void sort(Node **head)
    {
         // Code here
        Node *odd=(*head);
        Node *even=(*head)->next;
        Node *evenStart=even;
        while(even->next!=nullptr)
        {
            odd->next=even->next;
            odd=odd->next;
            even->next=odd->next;
            if(odd->next!=nullptr)
                even=even->next;
        }
        odd->next=nullptr;
        Node *newHead=reverse(evenStart);
        (*head)=merge(*head,newHead);
    }
};
