class Solution
{
public:
    int findShortestPath(vector<vector<int>> &mat)
    {
       // code here
       int n=mat.size();
       int m=mat[0].size();
       for(int i=0; i<n; i++)
       {
           for(int j=0; j<m; j++)
           {
               if(mat[i][j]==0)
               {
                    if(i-1>=0)
                        mat[i-1][j]=-1;
                    if(i+1<n)
                        mat[i+1][j]=-1;
                    if(j-1>=0)
                        mat[i][j-1]=-1;
                    if(j+1<m)
                        mat[i][j+1]=-1;
               }
           }
        }

        int dx[4]={-1,0,1,0};
        int dy[4]={0,1,0,-1};
        queue<pair<int,pair<int,int>>> q;
        vector<vector<int>> vis(n,vector<int>(m,0));
        for(int i=0; i<n; i++)
        {
            if(mat[i][0]==1)
                q.push({1,{i,0}});
        }
        while(q.size())
        {
            auto temp=q.front();
            q.pop();
            int dis=temp.first;
            int i=temp.second.first;
            int j=temp.second.second;
            vis[i][j]=1;
            if(j==m-1)
                return dis;
            for(int k=0; k<4; k++)
            {
                int x=i+dx[k];
                int y=j+dy[k];
                if(x>=0 && x<n && y>=0 && y<m && vis[x][y]==0 && mat[x][y]==1)
                    q.push({dis+1,{x,y}});
            }
        }
        return -1;
    }
};
