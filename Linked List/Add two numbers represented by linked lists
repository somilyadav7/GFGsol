class Solution
{
    public:
    //Function to add two numbers represented by linked list.
    Node* reverse(Node* head)
    {
        if(head==NULL)
            return NULL;
        Node *cur=head, *prev=NULL;
        while(cur)
        {
            Node* nextptr=cur->next;
            cur->next=prev;
            prev=cur;
            cur=nextptr;
        }
        return prev;
    }
    
    struct Node* addTwoLists(struct Node* num1, struct Node* num2)
    {
        // code here
        Node *temp=NULL;
        while(num1 and num1->data==0)
        {
            temp=num1;
            num1=num1->next;
        }
        if(temp)
            temp->next=NULL;
        temp=NULL;
        while(num2 and num2->data==0)
        {
            temp=num2;
            num2=num2->next;
        }
        if(temp)
            temp->next=NULL;
        if(!num1 and !num2)
            return new Node(0);
        if(!num1)   
            return num2;
        if(!num2)
            return num1;
        num1=reverse(num1);
        num2=reverse(num2);
        temp=new Node(1);
        Node *head1=num1,*head2=num2,*ans=temp;
        int carry=0;
        while(head1 and head2)
        {
            int sum = head1->data+head2->data+carry;
            carry=sum/10;
            temp->next=new Node(sum%10);
            temp=temp->next;
            head1=head1->next;
            head2=head2->next;
        }
        while(head1)
        {
            int sum = head1->data+carry;
            carry=sum/10;
            temp->next=new Node(sum%10);
            temp=temp->next;
            head1=head1->next;
        }
        while(head2)
        {
            int sum = head2->data+carry;
            carry=sum/10;
            temp->next=new Node(sum%10);
            temp=temp->next;
            head2=head2->next;
        }
        if(carry)
            temp->next=new Node(carry);
        return reverse(ans->next);
    }
};
