Given an integer array a[] of size n, find the length of the longest subsequence such that the absolute difference between adjacent elements is 1.

Example 1:

Input:
n = 7
a[] = {10, 9, 4, 5, 4, 8, 6}
Output: 
3
Explaination: 
The three possible subsequences of length 3 are {10, 9, 8}, {4, 5, 4}, and {4, 5, 6}, where adjacent elements have a absolute difference of 1. No valid subsequence of greater length could be formed.
Example 2:

Input: 
n = 5
a[] = {1, 2, 3, 4, 5}
Output: 
5
Explaination: 
All the elements can be included in the valid subsequence.
Your Task:
You do not need to read input. Your task is to complete the function longestSubseq() which takes integer n and array a[] as input parameters and returns the length of the longest subsequence where the absolute difference of adjacent elements is 1.

Expected Time Complexity: O(n)
Expected Auxiliary Space: O(n)

Constraints:
1 ≤ n ≤ 103
1 ≤ a[i] ≤ 103

class Solution {
  public:
    void help(int idx, vector<int> &a, vector<int> &cur, int &ans)
    {
        if(idx>=a.size())
        {
            ans=max(ans,(int)cur.size());
            return;
        }
        if(cur.empty() || abs(cur.back()-a[idx])==1)
        {
            cur.push_back(a[idx]);
            help(idx+1,a,cur,ans);//take
            cur.pop_back();
        }
        help(idx+1,a,cur,ans);//not take
    }
  
    int longestSubseq(int n, vector<int> &a) {
        // code here
        vector<int> cur;
        int ans = 0;
        help(0,a,cur,ans);
        return ans;
    }
};
