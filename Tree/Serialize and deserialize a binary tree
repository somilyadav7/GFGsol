class Solution
{
    public:
    //Function to serialize a tree and return a list containing nodes of tree.
    Node* solve(vector<int> &A, int &ind)
    {
        if(A[ind]==-1)
        {
            ind++;
            return NULL;
        }
        Node *Root=new Node(A[ind]);
        ind++;
        Root->left=solve(A,ind);
        Root->right=solve(A,ind);
        return Root;
    }
    
    void preorder(Node *root, vector<int> &arr)
    {
        if(root==NULL)
        {
            arr.push_back(-1);
            return;
        }
        arr.push_back(root->data);
        preorder(root->left,arr);
        preorder(root->right,arr);
    }
    
    vector<int> serialize(Node *root) 
    {
        //Your code here
        vector<int> arr;
        preorder(root,arr);
        return arr;
    }
    
    //Function to deserialize a list and construct the tree.
    Node * deSerialize(vector<int> &A)
    {
       //Your code here
       int ind=0;
       return solve(A,ind);
    }

};
