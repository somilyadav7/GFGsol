Given a binary tree, your task is to find all duplicate subtrees from the given binary tree.

Duplicate Subtree : Two trees are duplicates if they have the same structure with the same node values.

Note:  Return the root of each tree in the form of a list array & the driver code will print the tree in pre-order tree traversal in lexicographically increasing order.

public:
    string help(Node* root, vector<Node*> &ans, unordered_map<string,int> &mp)
    {
        if(!root)
            return "#";
        string temp = to_string(root->data)+' '+help(root->left,ans,mp)+' '+help(root->right,ans,mp);
        if(mp[temp]==1)
            ans.push_back(root);
        mp[temp]++;
        return temp;
    }
  
    vector<Node*> printAllDups(Node* root) {
        // Code here
        vector<Node*> ans;
        unordered_map<string,int> mp;
        help(root,ans,mp);
        return ans;
    }
};
